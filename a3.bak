#lang racket
;Problem 1

(define index
  (λ (var ls)
    (match ls
      (`() var)
      (`(,a . ,_) #:when (eqv? var a) 0)
      (`(,_ . ,d) (let ([idx (index var d)])
                    (cond
                      ((number? idx) (add1 idx))
                      ((symbol? idx) var)))))))

(define lex
  (λ (exp acc)
    (match exp
      (`,y #:when (symbol? y)
           (let ([idx (index y acc)])
             (cond
               ((symbol? idx) idx)
               ((number? idx) `(var ,idx)))))
      (`(lambda (,x) ,body)
       #:when (symbol? x)
       `(lambda ,(lex body (cons x acc))))
      (`(,rator ,rand)
       `(,(lex rator acc) ,(lex rand acc))))))

(displayln (lex '(lambda (x) x)
                '()))
(displayln (lex '(lambda (y) (lambda (x) y))
                '()))
(displayln (lex '(lambda (y) (lambda (x) (x y)))
                '()))
(displayln (lex '(lambda (x) (lambda (x) (x x)))
                '()))
(display (lex '(lambda (x) (lambda (x) (y x)))
              '()))

;Problem 2

(let ([y (* 3 4)])
      (* y y))

;Representation Dependent
(define value-of
  (λ (e env)
    (match e
      (`,n #:when (number? n) n)
      (`(* ,e1 ,e2)
       (* (value-of e1 env)
          (value-of e2 env)))
      (`,n #:when (boolean? n) n)
      (`(sub1 ,n)
       (sub1 (value-of n env)))
      (`(zero? ,n)
       (zero? (value-of n env)))
      (`(if ,cond ,then ,else)
       (if (value-of cond env) (value-of then env) (value-of else env)))
      (`(let ([,var-name ,var-expression])
          ,body)
       (value-of body (extend-env-fn var-name (value-of var-expression env) env)))
      ; Lookup the symbol y in environment
      (`,y #:when (symbol? y)
           (apply-env-fn env y))
      ; Return function
      (`(lambda (,x) ,body)
       #:when (symbol? x)
       (make-clos-fn x body env))
      ; Application should apply and of course,
      ; natural recursion
      (`(,rator ,rand)
       (apply-clos-fn rator rand env)))))

;Representation Independent
(define value-of-ri
  (λ (e env)
    (match e
      (`,n #:when (number? n) n)
      (`(* ,e1 ,e2)
       (* (value-of-ri e1 env)
          (value-of-ri e2 env)))
      (`,n #:when (boolean? n) n)
      (`(sub1 ,n)
       (sub1 (value-of-ri n env)))
      (`(zero? ,n)
       (zero? (value-of-ri n env)))
      (`(if ,cond ,then ,else)
       (if (value-of-ri cond env) (value-of-ri then env) (value-of-ri else env)))
      (`(let ([,var-name ,var-expression])
          ,body)
       (value-of-ri body (extend-env-fn var-name (value-of-ri var-expression env) env)))
      ; Lookup the symbol y in environment
      (`,y #:when (symbol? y)
           (apply-env-fn env y))
      ; Return function
      (`(lambda (,x) ,body)
       #:when (symbol? x)
       (make-clos-fn x body env))
      ; Application should apply and of course,
      ; natural recursion
      (`(,rator ,rand)
       (apply-clos-fn rator rand env)))))

(define value-of-ri-fn 
  (λ (x env)
    (value-of-ri x (empty-env-fn))))

(define empty-env-fn
  (λ ()
    (λ (y)
      (error 'value-of-ri "unbound ~a" y))))

(define extend-env-fn
  (λ (x arg env)
    (λ (y)
      (cond
        ((eqv? y x) arg)
        (else (apply-env-fn env y))))))

(define apply-env-fn
  (λ (env y)
    (env y)))

(define make-clos-fn
  (λ (x body env)
    (λ (arg)
      ; We also need to extend the environment
      (value-of-ri body (extend-env-fn x arg env)))))

(define apply-clos-fn
  (λ (rator rand env)
    ((value-of-ri rator env) (value-of-ri rand env))))


(displayln (value-of-ri
            '((lambda (x) (if (zero? x)
                              #t
                              #f))
              0)
            (lambda (y) (error 'value-of-ri "unbound variable ~s" y))))
(displayln (value-of-ri
            '((lambda (x) (if (zero? x)
                              12
                              47))
              0)
            (lambda (y) (error 'value-of-ri "unbound variable ~s" y))))
(displayln (value-of-ri
            '(let ([y (* 3 4)])
               ((lambda (x) (* x y)) (sub1 6)))
            (lambda (y) (error 'value-of-ri "unbound variable ~s" y))))
